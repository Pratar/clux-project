---
- name: Create a namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "WebServers-operator"
  loop: "{{ environments }}"

- name: Create a resource quota
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ResourceQuota
      metadata:
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        name: resource-quota
        labels:
          app.kubernetes.io/managed-by: "WebServers-operator"
      spec:
        hard:
          limits.cpu: "{{item.resources.limits.cpu}}"
          limits.memory: "{{item.resources.limits.memory}}"
          requests.cpu: "{{item.resources.requests.cpu}}"
          requests.memory: "{{item.resources.requests.memory}}"
  loop: "{{ environments }}"

- name: Create a member role building
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ item[1] }}"
        namespace: "{{ ansible_operator_meta.name }}-{{ item[0].name }}"
        labels:
          app.kubernetes.io/managed-by: "WebServers-operator"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: edit
      subjects:
        - kind: ServiceAccount
          name: "{{ item[1] }}"
          namespace: users
  with_nested:
    - "{{ environments }}"
    - "{{ members }}"

- name: Create a Service object from an inline definition
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: '{{ ansible_operator_meta.name }}-{{ item.name }}'
        namespace: '"{{ ansible_operator_meta.name }}-{{ item[0].name }}"'
        labels:
          app: webserver
          service: webserver
          app.kubernetes.io/managed-by: "WebServers-operator"
      spec:
        selector:
          app: webserver
          service: webserver
        ports:
        - protocol: TCP
          targetPort: 8080
          name: port-8080-tcp
          port: 8080

- name: start WebServer
  kubernetes.core.k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-{{ item.name }}'
        namespace: '"{{ ansible_operator_meta.name }}-{{ item[0].name }}"'
        labels:
          app.kubernetes.io/managed-by: "WebServers-operator"
      spec:
        replicas: "{{size}}"
        selector:
          matchLabels:
            app: webserver
        template:
          metadata:
            labels:
              app: webserver
          spec:
            containers:
            - name: webserver
              image: "gcr.io/infra-meta/webserver:0.0.1"
              ports:
                - containerPort: 8080

